name: Deploy Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:  
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: string  
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
        
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: write
      actions: write
      repository-projects: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -parallelism=10 \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Destroy
        id: destroy
        run: |
          terraform destroy \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy == 'true'

      - name: Get Terraform outputs and set variables
        id: terraform-output
        working-directory: ./terraform
        if: inputs.destroy != 'true'
        run: |
         # Find the state file
         echo "Looking for state file..."
         find . -name "terraform.tfstate" -type f
    
         # Try to refresh the state
         echo "Refreshing Terraform state..."
         terraform refresh || echo "Refresh failed, continuing..."
    
          # Try to get outputs with debug info
         echo "Available Terraform outputs:"
         terraform output || echo "No outputs available"
    
          # Set the hardcoded values we know are correct
         STORAGE_ACCOUNT_NAME="ghrepoarchive123"
         CONTAINER_NAME="security-backups"
    
         # Try to get the primary key
         echo "Trying to get storage account primary key..."
         KEY=$(terraform output -raw storage_account_primary_key 2>/dev/null || echo "")
    
         if [ -z "$KEY" ]; then
         echo "Failed to get key directly. Checking if we can get it from state file..."
          # Try to extract it directly from state file if it exists
         STATE_FILE=$(find . -name "terraform.tfstate" -type f | head -1)
         if [ -n "$STATE_FILE" ]; then
         echo "Found state file at $STATE_FILE"
         # Try to extract the key using jq if available
         if command -v jq > /dev/null; then
           KEY=$(jq -r '.outputs.storage_account_primary_key.value // empty' "$STATE_FILE" 2>/dev/null || echo "")
           fi
          fi
         fi
    
         # Set environment variables
         echo "Setting environment variables..."
         echo "AZURE_STORAGE_ACCOUNT=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
         echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
    
         if [ -n "$KEY" ]; then
         echo "::add-mask::$KEY"  # Mask the key in logs
         echo "AZURE_STORAGE_KEY=$KEY" >> $GITHUB_ENV
         echo "Key retrieved: Yes"
         else
         echo "Warning: Could not retrieve storage account key."
         echo "Key retrieved: No"
         fi
         shell: /usr/bin/bash -e {0}
