name: Deploy Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:  # Make the workflow reusable
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: string  # Change this to string instead of boolean
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
        
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write
      contents: read
      actions: write  # Needed to create/update secrets & variables

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -parallelism=10 \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="resource_group_name=rg-github-backup" \
            -var="location=westeurope" \
            -var="storage_account_name=ghbackupsa${{ github.run_id }}" \
            -var="container_name=repositories"
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="resource_group_name=rg-github-backup" \
            -var="location=westeurope" \
            -var="storage_account_name=ghbackupsa${{ github.run_id }}" \
            -var="container_name=repositories"
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Destroy
        id: destroy
        run: |
          terraform destroy \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="resource_group_name=rg-github-backup" \
            -var="location=westeurope" \
            -var="storage_account_name=ghbackupsa${{ github.run_id }}" \
            -var="container_name=repositories"
        working-directory: ./terraform
        if: inputs.destroy == 'true'

      - name: Get Terraform outputs
        id: terraform-output
        run: |
          # Use fixed values that we already know
          # The storage account name is based on the github run id
          STORAGE_ACCOUNT_NAME="ghbackupsa${{ github.run_id }}"
          CONTAINER_NAME="repositories"
          
          # Get the storage account key (more complex, need to fetch it differently)
          # Use Azure CLI to get the key directly
          KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "rg-github-backup" --query '[0].value' -o tsv)
          
          # Set the outputs
          echo "storage_account_name=${STORAGE_ACCOUNT_NAME}" >> $GITHUB_OUTPUT
          echo "container_name=${CONTAINER_NAME}" >> $GITHUB_OUTPUT
          echo "storage_account_key=${KEY}" >> $GITHUB_OUTPUT
          
          # Debug info (will be visible in logs but not affect the outputs)
          echo "Storage account: ${STORAGE_ACCOUNT_NAME}"
          echo "Container: ${CONTAINER_NAME}" 
          echo "Key retrieved: $(if [ -n \"$KEY\" ]; then echo 'Yes'; else echo 'No'; fi)"
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      # Set variables using GitHub CLI
      - name: Set GitHub Variables and Secrets
        if: inputs.destroy != 'true'
        run: |
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Set variables and secrets using gh CLI
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
          # Set variables
          gh variable set AZURE_STORAGE_ACCOUNT --body "${{ steps.terraform-output.outputs.storage_account_name }}"
          gh variable set CONTAINER_NAME --body "${{ steps.terraform-output.outputs.container_name }}"
          
          # Set secret
          gh secret set AZURE_STORAGE_KEY --body "${{ steps.terraform-output.outputs.storage_account_key }}"
