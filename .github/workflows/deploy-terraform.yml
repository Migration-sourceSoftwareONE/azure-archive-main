name: Deploy Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:  
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: string  
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
        
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: write
      actions: write
      repository-projects: write

    outputs:
      AZURE_STORAGE_ACCOUNT: ${{ steps.tf_outputs.outputs.AZURE_STORAGE_ACCOUNT }}
      CONTAINER_NAME: ${{ steps.tf_outputs.outputs.CONTAINER_NAME }}
      AZURE_STORAGE_KEY: ${{ steps.tf_outputs.outputs.AZURE_STORAGE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -parallelism=10 \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Destroy
        id: destroy
        run: |
          terraform destroy \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy == 'true'

      - name: Output Terraform values
        id: tf_outputs
        working-directory: ./terraform
        run: |
          echo "AZURE_STORAGE_ACCOUNT=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=$(terraform output -raw container_name)" >> $GITHUB_OUTPUT
          echo "AZURE_STORAGE_KEY=$(terraform output -raw storage_account_primary_key)" >> $GITHUB_OUTPUT

  call-archive:
      needs: terraform
      if: ${{ needs.terraform.outputs.AZURE_STORAGE_ACCOUNT && inputs.destroy != 'true' }}
      uses: ./.github/workflows/archive-org-repos.yml
      with:
        AZURE_STORAGE_ACCOUNT: ${{ needs.terraform.outputs.AZURE_STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ needs.terraform.outputs.CONTAINER_NAME }}
      secrets:
         ARCHIVE_APP_ID: ${{ secrets.ARCHIVE_APP_ID }}
         ARCHIVE_APP_PRIVATE_KEY: ${{ secrets.ARCHIVE_APP_PRIVATE_KEY }}
         AZURE_STORAGE_KEY: ${{ needs.terraform.outputs.AZURE_STORAGE_KEY }}
