name: Deploy Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:  
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
        type: string  
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
        
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: write
      actions: write
      repository-projects: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -parallelism=10 \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy != 'true'

      - name: Terraform Destroy
        id: destroy
        run: |
          terraform destroy \
            -auto-approve \
            -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
        working-directory: ./terraform
        if: inputs.destroy == 'true'

      - name: Get Terraform outputs and set variables
        id: terraform-output
        run: |
         # Use the explicit Terraform path
         TERRAFORM="${TERRAFORM_CLI_PATH}/terraform-bin"
    
         # Get outputs from terraform and capture the actual values
         STORAGE_ACCOUNT_NAME=$($TERRAFORM output -raw storage_account_name)
         CONTAINER_NAME=$($TERRAFORM output -raw container_name)
         RESOURCE_GROUP_NAME=$($TERRAFORM output -raw resource_group_name)
         KEY=$($TERRAFORM output -raw storage_account_primary_key)
    
         # Output retrieved values for debugging
         echo "Retrieved values:"
         echo "Storage account: ${STORAGE_ACCOUNT_NAME}"
         echo "Container: ${CONTAINER_NAME}"
         echo "Resource group: ${RESOURCE_GROUP_NAME}"
         echo "Key retrieved: $(if [ -n "$KEY" ]; then echo 'Yes'; else echo 'No'; fi)"
    
         # Set outputs and environment variables
         echo "storage_account_name=${STORAGE_ACCOUNT_NAME}" >> $GITHUB_OUTPUT
         echo "container_name=${CONTAINER_NAME}" >> $GITHUB_OUTPUT
         echo "storage_account_key=${KEY}" >> $GITHUB_OUTPUT
    
         echo "AZURE_STORAGE_ACCOUNT=${STORAGE_ACCOUNT_NAME}" >> $GITHUB_ENV
         echo "CONTAINER_NAME=${CONTAINER_NAME}" >> $GITHUB_ENV
         echo "AZURE_STORAGE_KEY=${KEY}" >> $GITHUB_ENV
    
         echo "Variables set for downstream jobs and steps"
        working-directory: ./terraform
        if: inputs.destroy != 'true'
        env:
          TERRAFORM_CLI_PATH: /home/runner/work/_temp/2975fcd7-5c28-4c06-845c-79606efa7042
